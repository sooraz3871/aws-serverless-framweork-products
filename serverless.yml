service: product-service

custom:
  tableName: 'Products'
  bucketName: 'productsbucketfortesting'


plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs16.x
  region: ap-southeast-2

functions:
  createProduct:
    handler: lambdas/createProductHandler.createProduct
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:PutItem
          - events:PutEvents  # Permission to publish events to EventBridge
          - events:DescribeEventBus  # Permission to describe EventBridge event bus
          - events:PutRule  # Permission to create/update EventBridge rule
          - events:PutTargets
          - events:*
          - lambda:InvokeFunction
        Resource:
          - Fn::GetAtt: [ ProductsTable, Arn ]
          - "*"
    events:
      - http:
          path: products
          method: post
          cors: true
    environment:
     PRODUCTS_TABLE: ${self:custom.tableName}   
     PRODUCTS_BUCKET: ${self:custom.bucketName}
     REGION: ${self:provider.region} 

  getProducts:
    handler: lambdas/getProductsHandler.getProducts
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:Scan
          - dynamodb:Query
          - s3:*
        Resource:
          - Fn::GetAtt: [ ProductsTable, Arn ]
          - Fn::GetAtt: [ ProductBucket, Arn ]
    events:
      - http:
          path: products
          method: get
          cors: true
    environment:
     PRODUCTS_TABLE: ${self:custom.tableName}
     PRODUCTS_BUCKET: ${self:custom.bucketName}
            
  deleteProduct:
    handler: lambdas/deleteProductHandler.deleteProduct
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - dynamodb:DeleteItem
          - dynamodb:GetItem
          - s3:*
        Resource:
          - Fn::GetAtt: [ ProductsTable, Arn ] 
          - Fn::GetAtt: [ ProductBucket, Arn ]   
    events:
      - http:
          path: products/{productId}
          method: delete
          cors: true
    environment:
     PRODUCTS_TABLE: ${self:custom.tableName}
     PRODUCTS_BUCKET: ${self:custom.bucketName}
     REGION: ${self:provider.region} 
  
  convertToThumbnail:
    handler: lambdas/convertToThumbnail.convertToThumbnail
    events:
      - eventBridge:
          eventBus: default
          pattern:
            source:
              - custom.createProduct
            detail-type:
              - CreateProductEvent       
    iamRoleStatements:
      - Effect: "Allow"
        Action:
          - s3:PutObject
          - lambda:InvokeFunction
          - events:*
        Resource:
          - Fn::GetAtt: [ ProductBucket, Arn ]
          - "*"
    environment:
     PRODUCTS_BUCKET: ${self:custom.bucketName}
         
             
resources:
  Resources:
    ProductBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
        CorsConfiguration:  # Add CORS configuration for the bucket
          CorsRules:
            - AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
              AllowedOrigins:
                - "*"  # Replace with specific allowed origins if needed  
    ProductsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.tableName}
        AttributeDefinitions:
          - AttributeName: productId
            AttributeType: S
        KeySchema:
          - AttributeName: productId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST 
        
    # PublicBucketPolicy:
    #   Type: AWS::S3::BucketPolicy
    #   Properties:
    #     Bucket: !Ref ProductBucket
    #     PolicyDocument:
    #       Version: '2012-10-17'
    #       Statement:
    #         - Effect: Allow
    #           Action:
    #             - 's3:GetObject'
    #           Resource:
    #             - !Join ['/', [!GetAtt [ProductBucket, Arn], '*']]
    #           Principal: '*'
          